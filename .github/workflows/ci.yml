name: Publish

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

jobs:
  publish:
    name: Publish crates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}-cache-v2
          cache-on-failure: 'true'
          cache-all-crates: 'true'

      - name: Log into registry
        run: cargo login $CARGO_REGISTRY_TOKEN

      - name: Publish internal
        continue-on-error: true
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            cargo publish --dry-run --package asahi_internal
          else
            OUTPUT=$(cargo publish --package asahi_internal 2>&1) || {
              if echo "$OUTPUT" | grep -q "already uploaded"; then
                echo "asahi_internal is already published, continuing..."
              else
                echo "Failed to publish asahi_internal: $OUTPUT"
                exit 1
              fi
            }
            sleep 5
          fi

      - name: Publish coordinator
        continue-on-error: true
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            cargo publish --dry-run --package asahi_coordinator
          else
            OUTPUT=$(cargo publish --package asahi_coordinator 2>&1) || {
              if echo "$OUTPUT" | grep -q "already uploaded"; then
                echo "asahi_coordinator is already published, continuing..."
              else
                echo "Failed to publish asahi_coordinator: $OUTPUT"
                exit 1
              fi
            }
            sleep 5
          fi

      - name: Find remaining crates
        id: find_crates
        run: |
          CRATES=$(find . -name "Cargo.toml" -not -path "*/target/*" -not -path "*/\.*/*" | sort)
          echo "Found crates: $CRATES"

          PKG_NAMES=""
          for crate_path in $CRATES; do
            if grep -q '^\[workspace\]' "$crate_path"; then
              echo "Skipping workspace file: $crate_path"
              continue
            fi

            PKG_NAME=$(grep '^\s*name\s*=' "$crate_path" | head -1 | sed 's/.*"\(.*\)".*/\1/')
            if [ -n "$PKG_NAME" ] && [ "$PKG_NAME" != "asahi_internal" ] && [ "$PKG_NAME" != "asahi_coordinator" ]; then
              echo "Found package: $PKG_NAME"
              PKG_NAMES="$PKG_NAMES $PKG_NAME"
            fi
          done

          echo "crates=$PKG_NAMES" >> $GITHUB_OUTPUT

      - name: Publish remaining crates
        continue-on-error: true
        run: |
          for crate in ${{ steps.find_crates.outputs.crates }}; do
            echo "Publishing $crate"
            if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
              cargo publish --dry-run --package "$crate" || echo "Dry run for $crate completed with issues, continuing..."
            else
              OUTPUT=$(cargo publish --package "$crate" 2>&1) || {
                if echo "$OUTPUT" | grep -q "already uploaded"; then
                  echo "$crate is already published, continuing..."
                else
                  echo "Failed to publish $crate: $OUTPUT"
                  echo "::warning::Failed to publish $crate, but continuing with other crates"
                fi
              }
              sleep 10
            fi
          done

      - name: Publish root crate
        run: |
          echo "Publishing Asahi"
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            cargo publish --dry-run --package asahi || echo "Dry run for asahi completed with issues"
          else
            OUTPUT=$(cargo publish --package asahi 2>&1) || {
              if echo "$OUTPUT" | grep -q "already uploaded"; then
                echo "asahi is already published"
              else
                echo "Failed to publish asahi: $OUTPUT"
                exit 1
              fi
            }
          fi
